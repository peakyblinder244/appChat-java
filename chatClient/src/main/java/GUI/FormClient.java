/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import chatClient.chatClient;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitorInputStream;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lhqua
 */
public class FormClient extends javax.swing.JFrame {

    private chatClient client = null;
    private Socket socket = null;
    String userName = "";
    Thread threadReadClient = null;
    Thread threadWriteClient = null;
    String nameFriend = "";
    private final int BUFFER_SIZE = 100;
    private static final int CHUNK_SIZE = 1024;

    public chatClient getClient() {
        return client;
    }

    public void setClient(chatClient client) {
        this.client = client;
    }

    public Socket getSocket() {
        return socket;
    }

    public void setSocket(Socket socket) {
        this.socket = socket;
    }

    /**
     * Creates new form FormClient
     *
     * @param ip
     * @param port
     * @param username
     */
    public FormClient(InetAddress ip, int port, String username) throws IOException {
        initComponents();
        try {
            socket = new Socket(ip, 3200);
            userName = username;
            client = new chatClient(port, ip, username);
            readClient();
            guiThongTinChoServer();
            System.err.println("hihi1");

        } catch (IOException e) {
            System.out.println("There're some error");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        guiTinNhan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bangTinNhan = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        danhSachBanBe = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        icon = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        layTinNhan = new javax.swing.JTextArea();
        chonEnter = new javax.swing.JCheckBox();
        guiFile = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        taiKhoan = new javax.swing.JMenu();
        thongTin = new javax.swing.JMenuItem();
        thoat = new javax.swing.JMenuItem();
        chatGroup = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        guiTinNhan.setText("Gửi");
        guiTinNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guiTinNhanActionPerformed(evt);
            }
        });

        bangTinNhan.setColumns(20);
        bangTinNhan.setRows(5);
        jScrollPane1.setViewportView(bangTinNhan);

        danhSachBanBe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Tài Khoản"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        danhSachBanBe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                danhSachBanBeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(danhSachBanBe);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Danh Sách Client Online");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(56, 56, 56))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        icon.setText("Icon");

        layTinNhan.setColumns(20);
        layTinNhan.setRows(5);
        layTinNhan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                layTinNhanKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(layTinNhan);

        chonEnter.setText("Enter Là Gửi");
        chonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chonEnterActionPerformed(evt);
            }
        });

        guiFile.setText("Gửi File");
        guiFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guiFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(icon, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(guiTinNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chonEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(guiFile, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chonEnter)
                            .addComponent(guiFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(icon)
                            .addComponent(guiTinNhan))))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        taiKhoan.setText("Tài Khoản");

        thongTin.setText("Thông Tin");
        taiKhoan.add(thongTin);

        thoat.setText("Thoát");
        thoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thoatActionPerformed(evt);
            }
        });
        taiKhoan.add(thoat);

        jMenuBar1.add(taiKhoan);

        chatGroup.setText("Chat Group");
        jMenuBar1.add(chatGroup);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guiTinNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiTinNhanActionPerformed
        if (nameFriend.equals("ALL")) {
            writeClientAll();
        } else {
            writeClientOneOne();
        }
    }//GEN-LAST:event_guiTinNhanActionPerformed

    private void thoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thoatActionPerformed
        try {
            thoatClient();
        } catch (IOException ex) {
            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_thoatActionPerformed

    private void danhSachBanBeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_danhSachBanBeMouseClicked
        int dong = danhSachBanBe.getSelectedRow();
        int[] cot = danhSachBanBe.getSelectedColumns();
        nameFriend = String.valueOf(danhSachBanBe.getValueAt(dong, 0));

    }//GEN-LAST:event_danhSachBanBeMouseClicked

    private void chonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chonEnterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chonEnterActionPerformed

    private void layTinNhanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_layTinNhanKeyPressed
        if (chonEnter.isSelected()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (nameFriend.equals("ALL")) {
                    writeClientAll();
                } else {
                    writeClientOneOne();
                }
            }
        }
    }//GEN-LAST:event_layTinNhanKeyPressed

    private void guiFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiFileActionPerformed
        if (nameFriend == "") {
            JOptionPane.showMessageDialog(null, "Chưa Chọn Người Gửi!");
        } else {

            File f = null;
            DataOutputStream dos = null;
            //Scanner sc = null;
            
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter imageFilter = new FileNameExtensionFilter("hinh anh", "jpg", "png");
            fileChooser.setFileFilter(imageFilter);
            fileChooser.setMultiSelectionEnabled(false);
            int x = fileChooser.showDialog(fileChooser, "Chọn File");
            String fpath = "";
            if (x == JFileChooser.APPROVE_OPTION) {
                fpath = fileChooser.getSelectedFile().getPath();
            }
            File file = new File(fpath);
            String fileName = file.getName();
            long fileSize = file.length();
            PrintStream out = null;
            try {
               
                String tmp ="SEND_FILE" + " " + fileName + " " + fileSize + " " + userName + " " + nameFriend;
                dos = new DataOutputStream(socket.getOutputStream());
                dos.writeUTF(tmp);
                writeFile(file, socket.getOutputStream());
                System.out.println("Finished sending " + file.getName() + " to server");
            } catch (IOException ex) {
                Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            bangTinNhan.append("bạn đã gửi file : " + fileName + " cho " + nameFriend + "\n");
            
          
                
        }
    }//GEN-LAST:event_guiFileActionPerformed
    
    private void writeFile(File file, OutputStream outStream) {
        //Tham Khao
        FileInputStream reader = null;
        try {
            reader = new FileInputStream(file);
            byte[] buffer = new byte[CHUNK_SIZE];
            int pos = 0;
            int bytesRead;
            while ((bytesRead = reader.read(buffer, 0, CHUNK_SIZE)) >= 0) {
                outStream.write(buffer, 0, bytesRead);
                outStream.flush();
                pos += bytesRead;
                System.out.println(pos + " bytes (" + bytesRead + " bytes read)");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }
    
     private void saveFile(File file, InputStream inStream) {
         //Tham Khao
        FileOutputStream fileOut = null;
        
        try {
            fileOut = new FileOutputStream(file);
            byte[] buffer = new byte[CHUNK_SIZE];
            int bytesRead;
            int pos = 0;
            while ((bytesRead = inStream.read(buffer, 0, CHUNK_SIZE)) > 0) {
                pos += bytesRead;
                System.out.println(pos + " bytes (" + bytesRead + " bytes read)");
                fileOut.write(buffer, 0, bytesRead);
                if(bytesRead <1024){
                    break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if (fileOut != null) {
                try {
                    fileOut.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println("Finished, filesize = " + file.length());
    }
    /**
     * @param args the command line arguments
     */
    private String sms = "";

    private void readClient() throws IOException {
        threadReadClient = new Thread() {
            @Override
            public void run() {
                DataInputStream dis = null;

                try {
                    dis = new DataInputStream(socket.getInputStream());
                    while (true) {
                        String sms = dis.readUTF();
                        System.out.println(sms);
                        StringTokenizer token = new StringTokenizer(sms);
                        String Format = token.nextToken();
                        System.out.println(Format);
                        switch (Format) {
                            case "UserOnl": {
                                List<String> listFiend = new ArrayList<String>();
                                client.setListFiend(listFiend);
                                while (token.hasMoreTokens()) {
                                    String user = token.nextToken();

                                    client.addFriend(user);

                                    capNhatDanhSachOnl();
                                }
                                break;
                            }
                            case "ChatOneOne": {
                                String userFriend = token.nextToken();
                                String nameUser = token.nextToken();
                                String smsReceive = userFriend + " nói với bạn: ";

                                sms = sms.replaceAll(nameUser, "");
                                sms = sms.replaceAll(userFriend, "");
                                sms = sms.replaceAll("ChatOneOne", "");

                                bangTinNhan.append(userFriend + " nói với bạn:" + sms + "\n");
                                System.out.println("ghi danh sach tin nhan");
                                break;

                            }
                            case "ChatAll": {
                                String userFriend = token.nextToken();
                                sms = sms.replaceAll(userFriend, "");
                                sms = sms.replaceAll("ChatAll", "");

                                bangTinNhan.append(userFriend + " nói với toàn thể:" + sms + "\n");
                                break;

                            }
                            case "SEND_FILE": {
                                String fileName = token.nextToken();
                                String stFileSize = token.nextToken();
                                String userSend = token.nextToken();
                                String userReceive = token.nextToken();

                                File file = new File("./download/",fileName);
                                saveFile(file, socket.getInputStream());
                                
                                bangTinNhan.append(userSend + " nói với bạn: " + fileName + "\n");
                                break;
                            }
                            default:
                                bangTinNhan.append(sms + "\n");

                        }

                    }
                } catch (IOException ex) {
                    Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        dis.close();
                        socket.close();
                    } catch (IOException ex1) {
                        Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex1);
                    }

                }

            }
        };
        threadReadClient.start();

    }
    
    

    private void writeClientAll() {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                //Scanner sc = null;
                try {
                    dos = new DataOutputStream(socket.getOutputStream());
                    sms = "ChatAll";
                    String tmp = layTinNhan.getText();
                    if (chonEnter.isSelected()) {
                        tmp = tmp.replaceAll("\n", "");
                    }
                    bangTinNhan.append("Bạn nói với toàn thể: " + tmp + "\n");
                    
                    sms = sms + " " + userName + " " + tmp;
                    
                    if (!sms.equals("")) {
                        dos.writeUTF(sms);
                        sms = "";
                        layTinNhan.setText("");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        dos.close();
                        socket.close();
                    } catch (IOException ex1) {
                        Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
            }
        };
        thread.start();
    }

    private void writeClientOneOne() {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                //Scanner sc = null;
                try {
                    dos = new DataOutputStream(socket.getOutputStream());
                    sms = "ChatOneOne";
                    String tmp = layTinNhan.getText();
                    if (chonEnter.isSelected()) {
                        tmp = tmp.replaceAll("\n", "");
                    }
                    sms = sms + " " + userName + " " + nameFriend + " " + tmp;

                    if (!sms.equals("")) {
                        dos.writeUTF(sms);
                        sms = "";
                        layTinNhan.setText("");
                    }

                    bangTinNhan.append("bạn nói với " + nameFriend + ": " + tmp + "\n");
                } catch (IOException ex) {
                    Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        dos.close();
                        socket.close();
                    } catch (IOException ex1) {
                        Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
            }
        };
        thread.start();
    }

    private void guiThongTinChoServer() {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                //Scanner sc = null;
                try {
                    dos = new DataOutputStream(socket.getOutputStream());
                    String thongtin = "ThongTin" + " " + userName;
                    dos.writeUTF(thongtin);

                } catch (IOException ex) {
                    Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        dos.close();
                        socket.close();
                    } catch (IOException ex1) {
                        Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
            }

        };
        thread.start();
    }

    private void execute() throws IOException {
        readClient();
        //writeClient();
    }

    private void capNhatDanhSachOnl() {
        DefaultTableModel defaultTableModel = new DefaultTableModel();
        danhSachBanBe.setModel(defaultTableModel);
        defaultTableModel.addColumn("Tài Khoản");
        List<String> danhSachOnl = client.getListFiend();
        for (String i : danhSachOnl) {
            Object[] tmp = new Object[]{i};
            defaultTableModel.addRow(tmp);
        }
        defaultTableModel.addRow(new Object[]{"ALL"});
    }

    private void thoatClient() throws IOException {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                //Scanner sc = null;
                try {
                    dos = new DataOutputStream(socket.getOutputStream());
                    String thongtin = "Thoat" + " " + userName;
                    dos.writeUTF(thongtin);

                    threadReadClient.stop();
                    if (threadWriteClient != null) {
                        threadWriteClient.stop();
                    }
                    socket.close();
                } catch (IOException ex) {
                    Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        dos.close();

                        socket.close();
                    } catch (IOException ex1) {
                        Logger.getLogger(FormClient.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
            }

        };
        thread.start();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bangTinNhan;
    private javax.swing.JMenu chatGroup;
    private javax.swing.JCheckBox chonEnter;
    private javax.swing.JTable danhSachBanBe;
    private javax.swing.JButton guiFile;
    private javax.swing.JButton guiTinNhan;
    private javax.swing.JButton icon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea layTinNhan;
    private javax.swing.JMenu taiKhoan;
    private javax.swing.JMenuItem thoat;
    private javax.swing.JMenuItem thongTin;
    // End of variables declaration//GEN-END:variables
}
